319 Concevoir et implémenter des applications
Identification du module
Directives d’évaluation des prestations (DEP)
Diplômes/brevets
Développeuse/Développeur de business numérique CFC (dès 2023)
Informaticien/ne CFC exploitation et infrastructure (dès 2021)
Informaticien/ne CFC Développement d'applications (dès 2021)

Application Engineering
Compétence
Connaître les bases de la programmation, leurs exigences et origine, et être à même de comprendre des problèmes en relation avec l’environnement professionnel et de développer des solutions appropriées.

Objet
Problèmes pouvant être transposés dans un langage de programmation.


Objectifs opérationnels
1.
Saisir le problème, développer de façon structurée des solutions possibles et les traduire pour les parties prenantes.
Connaissances opérationnelles nécessaires:

1.
Connaître la différence entre espace de problème et espace de solution ainsi que leur finalité.

2.
Connaître des outils en vue de recueillir et d’identifier les besoins sans avancer de solution.

3.
Connaître les raisons de séparer l’espace de problème de l’espace de solution (p. ex. gain d’innovation, réduction du stress).

2.
Créer une représentation visuelle appropriée pour la programmation des besoins.
Connaissances opérationnelles nécessaires:

1.
Connaître une notation servant à décrire graphiquement le déroulement d’une logique de programme (p. ex. diagramme de flux, structogramme, diagramme d’activité).

2.
Connaître la finalité des modèles et des diagrammes comme base de discussion et de mise en œuvre.

3.
Déduire les données nécessaires à partir des consignes (entrée, processus, sortie et types de données).
Connaissances opérationnelles nécessaires:

1.
Connaître les différences entre les types de données (p. ex. primitives, complexes).

2.
Connaître les principaux types de données (p. ex. integer, boolean, array avec une dimension).

3.
Connaître le mode de fonctionnement d’un logiciel selon le principe entrée-processus-sortie (input-process-output [IPO]).

4.
Implémenter l’application à l’aide de structures de contrôle et des fonctions créées.
Connaissances opérationnelles nécessaires:

1.
Connaître la construction fondamentale d’une application, respectivement d’un programme.

2.
Connaître l’utilisation des structures de contrôle telles que les itérations (vérifié/non vérifié) ou la sélection.

3.
Connaître le sens et le but des variables et des constantes ainsi que leurs différences.

4.
Connaître le domaine d’application des instructions et leur finalité.

5.
Connaître les possibilités des éditeurs et d’un environnement de développement ainsi que la manière de traiter les messages d’erreurs et d’alerte.

6.
Connaître la structure des fonctions (nom, paramètre, types de données, types de retours) et comment celles-ci peuvent être utilisées et appelées correctement dans un programme.

7.
Connaître la plus-value apportée par l’externalisation de parties de code dans des fonctions.

5.
Respecter les conventions définies, commenter le code en tenant compte de la maintenabilité.
Connaissances opérationnelles nécessaires:

1.
Connaître l’importance des conventions (p. ex. conventions d’entreprise, conventions de langage).

2.
Connaître l’importance des commentaires et leur contribution à une meilleure maintenabilité logicielle.

6.
Interpréter les défauts (erreurs) du logiciel et les corriger.
Connaissances opérationnelles nécessaires:

1.
Connaître la finalité, les fonctions et le mode de manipulation d’un débogueur.

2.
Connaître le sens et le but des tests ainsi que la finalité de cas de test individuels.

3.
Connaître une procédure de test statique (p. ex. revue de code) de code de programme et pouvoir en expliquer l’importance pour la qualité du logiciel.